load("bikes.Washington.Rdata")
spline_fit_cv <- smooth.spline(bikes$instant, bikes$cnt, cv = TRUE)
# Extract information from the fit with cross-validation
lambda_cv <- spline_fit_cv$spar
lambda_cv
df_cv <- spline_fit_cv$df
df_cv
knots_cv <- spline_fit_cv$fit$knot
print(length(knots_cv))
plot(bikes$instant, bikes$cnt, main = "Scatterplot and Estimated Regression Function (CV)",
xlab = "instant", ylab = "cnt", col = "blue")
lines(spline_fit_cv, col = "red")
?smooth.splines
?smooth.spline
load("bikes.Washington.Rdata")
spline_fit_cv <- smooth.spline(bikes$instant, bikes$cnt, cv = FALSE)
# Extract information from the fit with cross-validation
lambda_cv <- spline_fit_cv$spar
lambda_cv
df_cv <- spline_fit_cv$df
df_cv
plot(bikes$instant, bikes$cnt, main = "Scatterplot and Estimated Regression Function (CV)",
xlab = "instant", ylab = "cnt", col = "blue")
lines(spline_fit_cv, col = "red")
spline_fit_cv <- smooth.spline(bikes$instant, bikes$cnt, cv = FALSE, all.knots = FALSE)
load("bikes.Washington.Rdata")
spline_fit_cv <- smooth.spline(bikes$instant, bikes$cnt, cv = FALSE, all.knots = FALSE)
# Extract information from the fit with cross-validation
lambda_cv <- spline_fit_cv$spar
lambda_cv
df_cv <- spline_fit_cv$df
df_cv
knots_cv <- spline_fit_cv$fit$knot
print(length(knots_cv))
plot(bikes$instant, bikes$cnt, main = "Scatterplot and Estimated Regression Function (CV)",
xlab = "instant", ylab = "cnt", col = "blue")
lines(spline_fit_cv, col = "red")
source("IRWLS_logistic_regression.R")
which(bikes.cnt>5000)
which(bikes$cnt>5000)
cnt.5000 <- rep(0, len(bikes$cnt))
cnt.5000 <- rep(0, size(bikes$cnt))
cnt.5000 <- rep(0, length(bikes$cnt))
cnt.5000[which(bikes$cnt>5000)] <- 1
cnt.5000 <- rep(0, length(bikes$cnt))
cnt.5000[which(bikes$cnt>5000)] <- 1
cnt.5000
bikes$cnt
cnt.5000 <- rep(0, length(bikes$cnt))
cnt.5000[which(bikes$cnt>=5000)] <- 1
cnt.5000
cnt.5000 <- rep(0, length(bikes$cnt))
cnt.5000[which(bikes$cnt>=5000)] <- 1
source("IRWLS_logistic_regression.R")
?IRWLS_logistic_regression
logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6, plts=TRUE)
logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
, plts=TRUE
logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6, plts=TRUE)
logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000)
, df=6, plts=TRUE
logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6, plts=TRUE)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
plot(bikes$temp,cnt.5000,main="Regression 0-1 param. and non-param.")
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6, spar = NULL)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6, max.iter=10)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
spline.irwls.bike$fitted.values
which(spline.irwls.bike$fitted.values>0.5)
bikes$temp[which(spline.irwls.bike$fitted.values>0.5)]
min(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
min(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
max(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
min(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
max(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
lines(bikes$temp,0.5,col=2)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
min(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
max(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
hline(0.5,col=2)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
min(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
max(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
abline(h=0.5,col=2)
spline.irwls.bike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=6)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike$fitted.values,col=3)
temp.int.start <- min(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
temp.int.end <- max(bikes$temp[which(spline.irwls.bike$fitted.values>0.5)])
abline(h=0.5,col=2)
abline(v=temp.int.start,col=4)
abline(v=temp.int.end,col=4)
df.v = 3:15
require(caret)
install.packages("caret")
flds <- createFolds(cnt.5000, k = 5)
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5)
flds
flds[1]
flds[2]
plot(bikes$temp,cnt.5000)
points(bikes$temp[flds[1]],cnt.5000[flds[1]], col = 2)
flds <- createFolds(cnt.5000, k = 5, list = FALSE)
plot(bikes$temp,cnt.5000)
points(bikes$temp[flds[1]],cnt.5000[flds[1]], col = 2)
plot(bikes$temp,cnt.5000)
points(bikes$temp[flds[1]],cnt.5000[flds[1]], col = 3)
bikes$temp[flds[1]]
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
plot(bikes$temp,cnt.5000)
points(bikes$temp[unlist(flds[1])],cnt.5000[unlist(flds[1])], col = 3)
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
plot(bikes$temp,cnt.5000)
points(bikes$temp[unlist(flds[2])],cnt.5000[unlist(flds[2])], col = 3)
plot(bikes$temp,cnt.5000)
points(bikes$temp[unlist(flds[1])],cnt.5000[unlist(flds[1])], col = 4)
points(bikes$temp[unlist(flds[2])],cnt.5000[unlist(flds[2])], col = 3)
length(flds)
for (i in length(flds)){
print(i)
}
for (i in 1:length(flds)){
print(i)
}
plot(bikes$temp,cnt.5000)
points(bikes$temp[-unlist(flds[1])],cnt.5000[-unlist(flds[1])], col = 4)
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
print(spline.irwls.bike.ifold$predicted.values-cnt.5000[unlist(flds[i])])
}
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
print(spline.irwls.bike.ifold$predicted.values-cnt.5000[unlist(flds[i])])
print('....')
}
MSE_folds <- c()
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
sqrd_errors <- (spline.irwls.bike.ifold$predicted.values-cnt.5000[unlist(flds[i])])^2
MSE_folds <- c(MSE_folds, mean(sqrd_errors))
}
MSE_df <- mean(MSE_folds)
MSE_df
for (df in df.v){
print(df)
}
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
df.v = 3:15
for (df in df.v){
MSE_folds <- c()
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
# log_likelihood_binary = sum_i[(yi*log(p(xi)) + ((1-yi)*log(1-p(xi)))]
print(cnt.5000[unlist(flds[i])]*log(spline.irwls.bike.ifold$predicted.values))
#sqrd_errors <- (spline.irwls.bike.ifold$predicted.values-cnt.5000[unlist(flds[i])])^2
#MSE_folds <- c(MSE_folds, mean(sqrd_errors))
}
MSE_df <- 0
}
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
df.v = 3:15
for (df in df.v){
MSE_folds <- c()
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
# log_likelihood_binary = sum_i[(yi*log(p(xi)) + ((1-yi)*log(1-p(xi)))]
loglik_term1 <- cnt.5000[unlist(flds[i])]*log(spline.irwls.bike.ifold$predicted.values)
loglik_term2 <- (1-cnt.5000[unlist(flds[i])])*log(1-(spline.irwls.bike.ifold$predicted.values))
print(sum(loglik_term + loglik_term2))
#sqrd_errors <- (spline.irwls.bike.ifold$predicted.values-cnt.5000[unlist(flds[i])])^2
#MSE_folds <- c(MSE_folds, mean(sqrd_errors))
}
MSE_df <- 0
}
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
df.v = 3:15
for (df in df.v){
MSE_folds <- c()
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
# log_likelihood_binary = sum_i[(yi*log(p(xi)) + ((1-yi)*log(1-p(xi)))]
loglik_term1 <- cnt.5000[unlist(flds[i])]*log(spline.irwls.bike.ifold$predicted.values)
loglik_term2 <- (1-cnt.5000[unlist(flds[i])])*log(1-(spline.irwls.bike.ifold$predicted.values))
print(sum(loglik_term1 + loglik_term2))
#sqrd_errors <- (spline.irwls.bike.ifold$predicted.values-cnt.5000[unlist(flds[i])])^2
#MSE_folds <- c(MSE_folds, mean(sqrd_errors))
}
MSE_df <- 0
}
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
df.v = 3:15
loglik.dfs <- c()
for (df in df.v){
loglik.folds <- c()
for (i in 1:length(flds)){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=6)
# log_likelihood_binary = sum_i[(yi*log(p(xi)) + ((1-yi)*log(1-p(xi)))]
loglik_term1 <- cnt.5000[unlist(flds[i])]*log(spline.irwls.bike.ifold$predicted.values)
loglik_term2 <- (1-cnt.5000[unlist(flds[i])])*log(1-(spline.irwls.bike.ifold$predicted.values))
loglik.folds <- c(loglik.folds,sum(loglik_term1 + loglik_term2))
}
loglik.dfs <- c(loglik.dfs, sum(loglik.folds))
}
print(loglik.dfs)
#install.packages("caret")
require(caret)
flds <- createFolds(cnt.5000, k = 5, list = TRUE)
df.v = 3:15
loglik.dfs <- c()
for (df.proposal in df.v){
loglik.folds <- c()
for (i in (1:length(flds))){
spline.irwls.bike.ifold <-  logistic.IRWLS.splines(x=bikes$temp[-unlist(flds[i])],y=cnt.5000[-unlist(flds[i])],x.new=bikes$temp[unlist(flds[i])],df=df.proposal)
# log_likelihood_binary = sum_i[(yi*log(p(xi)) + ((1-yi)*log(1-p(xi)))]
loglik_term1 <- cnt.5000[unlist(flds[i])]*log(spline.irwls.bike.ifold$predicted.values)
loglik_term2 <- (1-cnt.5000[unlist(flds[i])])*log(1-(spline.irwls.bike.ifold$predicted.values))
loglik.folds <- c(loglik.folds,sum(loglik_term1 + loglik_term2))
}
loglik.dfs <- c(loglik.dfs, sum(loglik.folds))
}
print(loglik.dfs)
plot(df.v, loglik.dfs)
plot(df.v, loglik.dfs)
abline(v=df.v[which.max(loglik.dfs)],col=4)
spline.irwls.bike.loglike <- logistic.IRWLS.splines(x=bikes$temp, y=cnt.5000, df=4)
plot(bikes$temp,cnt.5000)
lines(bikes$temp,spline.irwls.bike.loglike$fitted.values,col=3)
temp.int.start <- min(bikes$temp[which(spline.irwls.bike.loglike$fitted.values>0.5)])
temp.int.end <- max(bikes$temp[which(spline.irwls.bike.loglike$fitted.values>0.5)])
abline(h=0.5,col=2)
abline(v=temp.int.start,col=4)
abline(v=temp.int.end,col=4)
